# para crear el repositorio 
git init
para ver la historia de un archivo
git log <filename>
#me muestra al version del archivo
git show <filename>
#para agreagar los cambios 
git add .

# para ver el cmabion entre los archivos que a los que le has hecho commit
git diff <codigod el commit que quieres compars 220de334> <codigo del commint contra el que lo vas a comparar>

cuando escribes add ela rchivo pasa de ram a vivier en el stage
para removerlo puedes usar el comando 
git rm <file name>

dupiniendo que no lo remuesves y hace un commit , el por defecto se va al master del repositrosio
git commit -m "mensaje"

una ves que haces add el archivo savr que hay cmabios y se va a staging , la 
unica forma de saber que esta staging o area temporal es con el add

cuando damos commit pasa de estar en estaging al repositorio 

que pasa cuando quieres trerte un cambio en el repositorio que no esta entu carpeta ,
vas a esa rama uy usachar el comoando checkout

git checkout  

cada ves que haces un commit creas una nueva version 
puedes crear tantas como quieras hasta tener la verison actual 

resulta que eun un punto en la v3 decidiste hacer cambios por tu propia cuenta
cpias la version actual o anterio  del master para crear el experimental 

si necesitas arlgar un bug de la ramar actual deberias crear una rama bugfixind
y luego ahcerle un merge



------------------volver a una version anterior de un commit------------------
git reset <id del commit al que queremos volver>
tipos de reset
git reset <id del commit al que queremos volver> --hard todo vuelve al estado anterior es el mas pegtiloaso
git reset <id del commit al que queremos volver> --soft manyiene en satgging lo quw esta en stagging
--------------------------------------------------------------------------------
git log //ver los cambios generales
git los --stat //ver los cambios por achivos
git show //muestra el utlimo cambio y le header
----------------------------------para ver como era un archivo antes--------------------------------------
git checkout <id del commit > <nameo_of_file>
si uso en ves del commit el master puedo volver al la utlima verison del archivo con
git checkout master <archivo>

----------------------------------------------------------------------------------------------------------
con git push manto todo al repositorio remoto
con el comanod pull copio el repositorio local y de lo ultimo que apso en el repositorio
-----------------------------------------------------
la rma hace una copia del umtimo commit
com git commit -am hace add directamente sobre los achivos que modificaste que no son comopletamente nuevos mas el commit
----------------------------------------------------------------------------------------------------------------------------
Ramas                |
----------------------
las ramas se crean desde la version donde estoy
para crar laa rama
usar : git branch <nombre_que uieres colocar ala rama>
con  : git checkout puedo cambiarme de rama haciendo
git checkout <nombre_rama_a_la_que_quieres cambiar>
---------------------------------------------------------------------------
cuando se hace un merge la bracnh desaprece y se fusiona con el asmter
el merge siemprese ahce desde don esstoy
--------------------------------------------------------------------------------------------------------------------------
Cómo revertir un merge
Si nos hemos equivocado y queremos cancelar el merge, debemos usar el siguiente comando:

git merge --abort
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conflictos en repositorios remotos
Al trabajar con otras personas, es necesario utilizar un repositorio remoto.
­
-Para copiar el repositorio remoto al directorio de trabajo local, se utiliza el comando git clone <url>, y para enviar cambios al repositorio remoto se utiliza git push.
-Para actualizar el repositorio local se hace uso del comando git fetch, luego se debe fusionar los datos traídos con los locales usando git merge.

Para traer los datos y fusionarlos a la vez, en un solo comando, se usa git pull.
­- Para crear commits rápidamente, fusionando git add y git commit -m "", usamos git commit -am "".
­- Para generar nuevas ramas, hay que posicionarse sobre la rama que se desea copiar y utilizar el comando git branch <nombre>.
Para saltar entre ramas, se usa el comando git checkout <branch>
­- Una vez realizado los cambios en la rama, estas deben fusionarse con git merge.
El merge ocurre en la rama en la que se está posicionado. Por lo tanto, la rama a fusionar se transforma en la principal.
Los merges también son commits.
Los merges pueden generar conflictos, esto aborta la acción y pide que soluciones el problema manualmente, aceptando o rechazando los cambios que vienen.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
la llave privada sirve para

----------------------------------------
para lsitar mi entorno local usar git config -l

.---------------------------------------------------
Cómo generar tus llaves SSH
1. Generar tus llaves SSH**
Recuerda que es muy buena idea proteger tu llave privada con una contraseña.
ssh-keygen -t rsa -b 4096 -C "tu@email.com"

2. Terminar de configurar nuestro sistema.
En Windows y Linux:

Encender el “servidor” de llaves SSH de tu computadora:
eval $(ssh-agent -s)

Añadir tu llave SSH a este “servidor”:
ssh-add ruta-donde-guardaste-tu-llave-privada
-----------------------------------------------------------------------------
GitHub es una plataforma que nos permite guardar repositorios de Git que podemos usar como servidores remotos y ejecutar algunos comandos de forma visual e interactiva (sin necesidad de la consola de comandos).

Luego de crear nuestra cuenta, podemos crear o importar repositorios, crear organizaciones y proyectos de trabajo, descubrir repositorios de otras personas, contribuir a esos proyectos, dar estrellas y muchas otras cosas.

El README.md es el archivo que veremos por defecto al entrar a un repositorio. Es una muy buena práctica configurarlo para describir el proyecto, los requerimientos y las instrucciones que debemos seguir para contribuir correctamente.

Para clonar un repositorio desde GitHub (o cualquier otro servidor remoto) debemos copiar la URL (por ahora, usando HTTPS) y ejecutar el comando git clone + la URL que acabamos de copiar. Esto descargará la versión de nuestro proyecto que se encuentra en GitHub.

Sin embargo, esto solo funciona para las personas que quieren empezar a contribuir en el proyecto.

Cómo conectar un repositorio de GitHub a nuestro documento local
Si queremos conectar el repositorio de GitHub con nuestro repositorio local, que creamos usando el comando git init, debemos ejecutar las siguientes instrucciones:

Guardar la URL del repositorio de GitHub con el nombre de origin
git remote add origin URL
Verificar que la URL se haya guardado correctamente:
git remote
git remote -v
Traer la versión del repositorio remoto y hacer merge para crear un commit con los archivos de ambas partes. Podemos usar git fetch y git merge o solo git pull con el flag --allow-unrelated-histories:
git pull origin master --allow-unrelated-histories
Por último, ahora sí podemos hacer git push para guardar los cambios de nuestro repositorio local en GitHub:
git push origin master
Cómo autenticarte en GitHub 2022
Antes de empezar debemos renombrar la rama ‘máster’ a ‘main’, este es el nuevo estándar en GitHub, para esto:

Primero nos posicionamos en la rama a la que queremos cambiarle el nombre.
Ejecutamos el siguiente comando: git branch -M main
Pasos para crear un token de acceso personal.

Desde el 2022 GitHub ya no deja hacer el push con la contraseña del propio GitHub, para esto tenemos que crear un token, y este token es la contraseña que vamos a colocar cuando nos pida clave.

Descubre el uso de tags en Github

Seguir la secuencia: Ingresamos a nuestra cuenta de GitHub.

Buscamos Settings
Click en Developer settings
Click en Personal access tokens
Click en Generate new token aquí se puede colocar un nombre, la fecha de expiración.
Tildar en repo y luego click en el botón verde Generate token


------------------------------------------------------------------------------------------------
Desde el 1 de octubre de 2020 GitHub cambió el nombre de la rama principal: ya no es “master” -como aprenderás en el curso- sino main.

---------------------------------
como agregar la infor del nuestro repo local a la nuve de git hup:
hacemos el comando
git remote add origin <direccion htttps deñ repo>
------------------------------------------------------------------------------------------------------
antes de ahcer un commit hacer
git pull 
------------------------------------------------------------------------------------------------------------------------------------
git log --all --graph --decorate ---oneline parra mirar todos los cmabios realizados en forma de grafo 
-----------------------------------------------------------------------------------------------------------------------------------
creacion de tags 
------------------------------------------------------------
git tag -a v0.1 -m  <mensaje agregado>
exmaple:
git tag -a v0.1 -m "primeros comandos de git"
git tag ,  muestra la lista de todos los tags 
para mirar con que commit esta relacionado un tag
git show-ref --tags
---------------------------------------------------------
para ver que todo loq ue esta en intener traeresles usar el comando
git pull  origin master or in new version s main
git push origin --tags